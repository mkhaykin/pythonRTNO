"""question and answers table

Revision ID: 0e8c7b428c4a
Revises: 8a184c87bf05
Create Date: 2024-05-24 19:58:21.004301

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0e8c7b428c4a'
down_revision: Union[str, None] = '8a184c87bf05'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('questions',
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('user_name', sa.String(), nullable=False),
    sa.Column('text', sa.String(), server_default='', nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_questions_message_id'), 'questions', ['message_id'], unique=True)
    op.create_index(op.f('ix_questions_user_id'), 'questions', ['user_id'], unique=False)
    op.create_index(op.f('ix_questions_user_name'), 'questions', ['user_name'], unique=False)
    op.create_table('answers',
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('operator_id', sa.Integer(), nullable=False),
    sa.Column('operator_name', sa.String(), nullable=False),
    sa.Column('text', sa.String(), server_default='', nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_answers_operator_id'), 'answers', ['operator_id'], unique=False)
    op.create_index(op.f('ix_answers_operator_name'), 'answers', ['operator_name'], unique=False)
    # ### end Alembic commands ###
    for name in ('questions', 'answers'):
        trig_ddl = """
            CREATE TRIGGER tr_{}_updated_at BEFORE UPDATE
            ON {}
            FOR EACH ROW EXECUTE PROCEDURE
            refresh_updated_at();
            """.format(name, name)
        op.execute(trig_ddl)


def downgrade() -> None:
    for name in ('questions', 'answers'):
        op.execute(f'drop trigger if exists tr_{name}_updated_at on confirm cascade;')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_answers_operator_name'), table_name='answers')
    op.drop_index(op.f('ix_answers_operator_id'), table_name='answers')
    op.drop_table('answers')
    op.drop_index(op.f('ix_questions_user_name'), table_name='questions')
    op.drop_index(op.f('ix_questions_user_id'), table_name='questions')
    op.drop_index(op.f('ix_questions_message_id'), table_name='questions')
    op.drop_table('questions')
    # ### end Alembic commands ###
