# docker-compose.yml

version: "3.9"

services:
  db:
    image: postgres:15.1-alpine
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
     - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.10.7-alpine
    container_name: rabbitmq
    hostname: rabbit
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_DEFAULT_VHOST}"
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile_api
    container_name: rtno_api
    restart: on-failure
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      REDIS_SERVER: redis
      RABBITMQ_SERVER: rabbit
      PYTHONPATH: "${PYTHONPATH}:src"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    entrypoint: ["python", "src/run_api.py"]

  bot:
    build:
      context: .
      dockerfile: Dockerfile_bot
    container_name: rtno_bot
    restart: on-failure
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      REDIS_SERVER: redis
      RABBITMQ_SERVER: rabbit
      TG_BOT_API_HOST: api
      PYTHONPATH: "${PYTHONPATH}:src"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    entrypoint: ["python", "src/run_bot.py",]

networks:
  default:
      name: lan_rtno
